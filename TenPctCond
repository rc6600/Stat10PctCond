import java.util.*;

public class TenPctCond {

	public static void main(String[] args) {
		/**
		 * Note: Edit these values to vary the histogram
		 */
		int popNum = 1000; // Population size
		int propNum = 500; // Number of successes
		int n = 90; // Sample size
		int sampleNum = 20000; // Number of samples taken
		double bucket = 0.025; // Bucket width for the proportion
		int factor = 250; // Factor to decrease the histogram by
		boolean withReplacement = true; // Indicates if the sample is w/ or w/o
											// replacement
		// Scanner scan = new Scanner(System.in);
		// System.out.print("Adjust Values? (enter \"yes\" if so, anything else
		// otherwise): ");
		// if (scan.next().toUpperCase().equals("YES")) {
		// popNum = scan.nextInt();
		// System.out.print("Enter population size: ");
		// popNum = scan.nextInt();
		// System.out.print("Enter number of successes (p * n): ");
		// propNum = scan.nextInt();
		// System.out.print("Enter sample size: ");
		// n = scan.nextInt();
		// System.out.print("Enter # of samples taken: ");
		// sampleNum = scan.nextInt();
		// System.out.print("Enter bucket width (for p^): ");
		// bucket = scan.nextDouble();
		// System.out.print("Enter factor for histogram (Default value is 1):
		// ");
		// factor = scan.nextInt();
		// System.out.print("Is this sample w/ replacement? (enter \"yes\" if
		// so, anything else otherwise): ");
		// if (scan.next().toUpperCase().equals("YES")) {
		// withReplacement = true;
		// }
		// }
		// scan.close();

		boolean[] popVals = new boolean[popNum];

		for (int x = 0; x < propNum; x++) {
			popVals[x] = true;
		}
		for (int x = propNum; x < popNum; x++) {
			popVals[x] = false;
		}

		double[] sampleVals = new double[sampleNum];
		Random random = new Random();

		if (!withReplacement) {
			for (int sampleX = 0; sampleX < sampleNum; sampleX++) {
				double tempSample = 0;
				HashSet<Integer> alreadyTaken = new HashSet<Integer>(sampleNum);
				for (int x = 0; x < n; x++) {
					int index = (int) (random.nextDouble() * popNum);
					if (!alreadyTaken.contains(index)) {
						if (popVals[index]) {
							tempSample++;
						}
						alreadyTaken.add(index);
					} else {
						x--;
					}
				}
				tempSample /= n;
				sampleVals[sampleX] = tempSample;
			}
		} else {
			for (int sampleX = 0; sampleX < sampleNum; sampleX++) {
				double tempSample = 0;
				for (int x = 0; x < n; x++) {
					int index = (int) (random.nextDouble() * popNum);
					if (popVals[index]) {
						tempSample++;
					}
				}
				tempSample /= n;
				sampleVals[sampleX] = tempSample;
			}
		}

		int[] histogram = new int[(int) (1 / bucket) + 1];
		for (double val : sampleVals) {
			histogram[(int) (val / bucket + .5)]++;
		}

		boolean[] extras = new boolean[(int) (1 / bucket) + 1];
		for (int x = 0; x < histogram.length; x++) {
			if (histogram[x] % factor != 0) {
				extras[x] = true;
			}
			histogram[x] /= factor;
		}

		for (int index = 0; index < histogram.length; index++) {
			for (int x = 0; x < histogram[index]; x++) {
				System.out.print("x");
			}
			if (extras[index] == true) {
				System.out.print("o");
			}
			System.out.println();
		}
	}
}
